{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","title","id","completed","classNames","onClick","currentTodoActions","setTodo","TodoFilter","changeQuery","filterActions","onSubmit","event","preventDefault","value","onChange","e","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","useEffect","userId","userFromServer","catch","Error","href","email","name","App","isLoading","setIsLoading","getTodosFromServer","a","todosFromServer","todosActions","visibleTodos","useMemo","preparedQuery","toLowerCase","trim","queryCheck","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11fd90fe.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeQuery = { type: 'filter/changeQuery', payload: string };\ntype ChangeStatus = { type: 'filter/changeStatus', payload: Status };\ntype Action = ChangeQuery | ChangeStatus;\ntype InitialStateType = {\n  query: string;\n  status: Status;\n};\n\nconst changeQuery = (query: string): ChangeQuery => ({\n  type: 'filter/changeQuery',\n  payload: query,\n});\n\nconst changeStatus = (status: Status): ChangeStatus => ({\n  type: 'filter/changeStatus',\n  payload: status,\n});\n\nconst initialState: InitialStateType = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/changeQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/changeStatus':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { changeQuery, changeStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadAction = {\n  type: 'todos/LOAD';\n  payload: Todo[];\n};\n\nconst load = (todos: Todo[]): LoadAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\nexport const actions = { load };\n\nconst todosReducer = (todos: Todo[] = [], action: LoadAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  currentTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, currentTodo }) => {\n  const dispatch = useAppDispatch();\n  const setTodo = ((todo: Todo) => dispatch(currentTodoActions.setTodo(todo)));\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => {\n              const { title, id, completed } = todo;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={\n                      classNames({ 'has-text-danger': !completed, 'has-text-success': completed })\n                    }\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodo(todo)}\n                    >\n                      {currentTodo && currentTodo.id === id ? (\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye-slash\" />\n                        </span>\n                      ) : (\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye\" />\n                        </span>\n                      )}\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\ninterface Props {\n  filter: { query: string, status: string }\n}\n\nexport const TodoFilter: React.FC<Props> = ({ filter }) => {\n  const dispatch = useAppDispatch();\n  const changeStatus = ((status: Status) => (\n    dispatch(filterActions.changeStatus(status)))\n  );\n  const changeQuery = ((query: string) => (\n    dispatch(filterActions.changeQuery(query)))\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter.status}\n            onChange={(e) => changeStatus(e.target.value as Status)}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={filter.query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(e) => changeQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!filter.query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clearSearchButton\"\n              onClick={() => changeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL + url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const { title, completed, id } = todo;\n  const dispatch = useAppDispatch();\n  const removeTodo = (() => dispatch(currentTodoActions.removeTodo()));\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userFromServer => setUser(userFromServer))\n      .catch(() => {\n        throw new Error(\"User can't be loaded for now\");\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"modalCloseButton\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Todo } from './types/Todo';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const loadTodos = ((data: Todo[]) => dispatch(todosActions.load(data)));\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n    try {\n      const todosFromServer = await getTodos();\n\n      loadTodos(todosFromServer);\n    } catch {\n      throw new Error('Todos have not been loaded');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = useMemo(() => (\n    todos.filter(todo => {\n      const preparedQuery = filter.query.toLowerCase().trim();\n      const queryCheck = todo.title.toLowerCase().includes(preparedQuery);\n\n      switch (filter.status) {\n        case 'active':\n          return !todo.completed && queryCheck;\n\n        case 'completed':\n          return todo.completed && queryCheck;\n\n        default:\n          return queryCheck;\n      }\n    })\n  ), [filter, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter filter={filter} />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList\n                    todos={visibleTodos}\n                    currentTodo={currentTodo}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal todo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}